"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react18-input-otp";
exports.ids = ["vendor-chunks/react18-input-otp"];
exports.modules = {

/***/ "(ssr)/./node_modules/react18-input-otp/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react18-input-otp/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _excluded = [\n    \"placeholder\",\n    \"separator\",\n    \"isLastChild\",\n    \"ariaLabelOverride\",\n    \"shouldRender\",\n    \"inputStyle\",\n    \"focus\",\n    \"isDisabled\",\n    \"hasErrored\",\n    \"errorStyle\",\n    \"isSuccessed\",\n    \"successStyle\",\n    \"focusStyle\",\n    \"disabledStyle\",\n    \"shouldAutoFocus\",\n    \"isInputNum\",\n    \"index\",\n    \"value\",\n    \"className\",\n    \"isInputSecure\",\n    \"onSubmit\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar BACKSPACE = 8;\nvar LEFT_ARROW = 37;\nvar RIGHT_ARROW = 39;\nvar DELETE = 46;\nvar SPACEBAR = 32;\nvar ENTER = 13;\nvar isStyleObject = function isStyleObject(obj) {\n    return _typeof(obj) === \"object\";\n};\nvar SingleOtpInput = function(_PureComponent) {\n    _inherits(SingleOtpInput, _PureComponent);\n    var _super = _createSuper(SingleOtpInput);\n    function SingleOtpInput(props) {\n        var _this;\n        _classCallCheck(this, SingleOtpInput);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"getClasses\", function() {\n            for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n                classes[_key] = arguments[_key];\n            }\n            return classes.filter(function(c) {\n                return !isStyleObject(c) && c !== false;\n            }).join(\" \");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getType\", function() {\n            var _this$props = _this.props, isInputSecure = _this$props.isInputSecure, isInputNum = _this$props.isInputNum;\n            if (isInputSecure) {\n                return \"password\";\n            }\n            if (isInputNum) {\n                return \"tel\";\n            }\n            return \"text\";\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getAriaLabel\", function(index, isInputNum) {\n            var ariaLabelOverride = _this.props.ariaLabelOverride;\n            if (ariaLabelOverride) {\n                return ariaLabelOverride;\n            }\n            return \"\".concat(index === 0 ? \"Please enter verification code. \" : \"\").concat(isInputNum ? \"Digit\" : \"Character\", \" \").concat(index + 1);\n        });\n        _this.input = _react[\"default\"].createRef();\n        return _this;\n    }\n    _createClass(SingleOtpInput, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var _this$props2 = this.props, focus = _this$props2.focus, shouldAutoFocus = _this$props2.shouldAutoFocus;\n                var inputEl = this.input.current;\n                if (inputEl && focus && shouldAutoFocus) {\n                    inputEl.focus();\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var focus = this.props.focus;\n                var inputEl = this.input.current;\n                if (prevProps.focus !== focus && inputEl && focus) {\n                    inputEl.focus();\n                    inputEl.select();\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props3 = this.props, placeholder = _this$props3.placeholder, separator = _this$props3.separator, isLastChild = _this$props3.isLastChild, ariaLabelOverride = _this$props3.ariaLabelOverride, shouldRender = _this$props3.shouldRender, inputStyle = _this$props3.inputStyle, focus = _this$props3.focus, isDisabled = _this$props3.isDisabled, hasErrored = _this$props3.hasErrored, errorStyle = _this$props3.errorStyle, isSuccessed = _this$props3.isSuccessed, successStyle = _this$props3.successStyle, focusStyle = _this$props3.focusStyle, disabledStyle = _this$props3.disabledStyle, shouldAutoFocus = _this$props3.shouldAutoFocus, isInputNum = _this$props3.isInputNum, index = _this$props3.index, value = _this$props3.value, className = _this$props3.className, isInputSecure = _this$props3.isInputSecure, onSubmit = _this$props3.onSubmit, rest = _objectWithoutProperties(_this$props3, _excluded);\n                return _react[\"default\"].createElement(\"div\", {\n                    className: className,\n                    style: {\n                        display: \"flex\",\n                        alignItems: \"center\"\n                    }\n                }, _react[\"default\"].createElement(\"input\", _extends({\n                    \"aria-label\": this.getAriaLabel(index, isInputNum),\n                    style: Object.assign({\n                        width: \"1em\",\n                        textAlign: \"center\",\n                        padding: 0\n                    }, isStyleObject(inputStyle) && inputStyle, focus && isStyleObject(focusStyle) && focusStyle, isDisabled && isStyleObject(disabledStyle) && disabledStyle, hasErrored && !isSuccessed && isStyleObject(errorStyle) && errorStyle, isSuccessed && !hasErrored && isStyleObject(successStyle) && successStyle),\n                    placeholder: placeholder,\n                    className: this.getClasses(inputStyle, focus && focusStyle, isDisabled && disabledStyle, hasErrored && !isSuccessed && errorStyle, isSuccessed && !hasErrored && successStyle),\n                    type: this.getType(),\n                    ref: this.input,\n                    disabled: isDisabled,\n                    value: value ? value : \"\"\n                }, rest)), !isLastChild && shouldRender && separator);\n            }\n        }\n    ]);\n    return SingleOtpInput;\n}(_react.PureComponent);\nvar OtpInput = function(_Component) {\n    _inherits(OtpInput, _Component);\n    var _super2 = _createSuper(OtpInput);\n    function OtpInput() {\n        var _this2;\n        _classCallCheck(this, OtpInput);\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        _this2 = _super2.call.apply(_super2, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this2), \"state\", {\n            activeInput: 0\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"getOtpValue\", function() {\n            return _this2.props.value ? _this2.props.value.toString().split(\"\") : [];\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"getPlaceholderValue\", function() {\n            var _this2$props = _this2.props, placeholder = _this2$props.placeholder, numInputs = _this2$props.numInputs;\n            if (typeof placeholder === \"string\") {\n                if (placeholder.length === numInputs) {\n                    return placeholder;\n                }\n                if (placeholder.length > 0) {\n                    console.error(\"Length of the placeholder should be equal to the number of inputs.\");\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"handleOtpChange\", function(otp) {\n            var onChange = _this2.props.onChange;\n            var otpValue = otp.join(\"\");\n            onChange(otpValue);\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"isInputValueValid\", function(value) {\n            var isTypeValid = _this2.props.isInputNum ? !isNaN(parseInt(value, 10)) : typeof value === \"string\";\n            return isTypeValid && value.trim().length === 1;\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"focusInput\", function(input) {\n            var numInputs = _this2.props.numInputs;\n            var activeInput = Math.max(Math.min(numInputs - 1, input), 0);\n            _this2.setState({\n                activeInput: activeInput\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"focusNextInput\", function() {\n            var activeInput = _this2.state.activeInput;\n            _this2.focusInput(activeInput + 1);\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"focusPrevInput\", function() {\n            var activeInput = _this2.state.activeInput;\n            _this2.focusInput(activeInput - 1);\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"changeCodeAtFocus\", function(value) {\n            var activeInput = _this2.state.activeInput;\n            var otp = _this2.getOtpValue();\n            otp[activeInput] = value[0];\n            _this2.handleOtpChange(otp);\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"handleOnPaste\", function(e) {\n            e.preventDefault();\n            var activeInput = _this2.state.activeInput;\n            var _this2$props2 = _this2.props, numInputs = _this2$props2.numInputs, isDisabled = _this2$props2.isDisabled;\n            if (isDisabled) {\n                return;\n            }\n            var otp = _this2.getOtpValue();\n            var nextActiveInput = activeInput;\n            var rawPastedData = e.clipboardData.getData(\"text/plain\");\n            var filteredData = _this2.props.isInputNum ? rawPastedData.replace(/\\D/g, \"\") : rawPastedData;\n            var pastedData = filteredData.slice(0, numInputs - activeInput).split(\"\");\n            for(var pos = 0; pos < numInputs; ++pos){\n                if (pos >= activeInput && pastedData.length > 0) {\n                    otp[pos] = pastedData.shift();\n                    nextActiveInput++;\n                }\n            }\n            _this2.setState({\n                activeInput: nextActiveInput\n            }, function() {\n                _this2.focusInput(nextActiveInput);\n                _this2.handleOtpChange(otp);\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"handleOnChange\", function(e) {\n            var value = e.target.value;\n            if (_this2.isInputValueValid(value)) {\n                _this2.changeCodeAtFocus(value);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"handleOnKeyDown\", function(e) {\n            if (e.keyCode === BACKSPACE || e.key === \"Backspace\") {\n                e.preventDefault();\n                _this2.changeCodeAtFocus(\"\");\n                _this2.focusInput(_this2.state.activeInput - 1);\n            } else if (e.keyCode === DELETE || e.key === \"Delete\") {\n                e.preventDefault();\n                _this2.changeCodeAtFocus(\"\");\n            } else if (e.keyCode === LEFT_ARROW || e.key === \"ArrowLeft\") {\n                e.preventDefault();\n                _this2.focusPrevInput();\n            } else if (e.keyCode === RIGHT_ARROW || e.key === \"ArrowRight\") {\n                e.preventDefault();\n                _this2.focusNextInput();\n            } else if (e.keyCode === SPACEBAR || e.key === \" \" || e.key === \"Spacebar\" || e.key === \"Space\") {\n                e.preventDefault();\n            } else if (e.keyCode === ENTER || e.key === \"Enter\") {\n                _this2.props.onSubmit();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"handleOnInput\", function(e) {\n            var value = e.target.value;\n            if (!e.target.value) return;\n            if (e.target.value && e.target.value.length > 1) {\n                e.preventDefault();\n                var numInputs = _this2.props.numInputs;\n                var activeInput = _this2.state.activeInput;\n                var otp = _this2.getOtpValue();\n                var pastedData = e.target.value.slice(0, numInputs - activeInput).split(\"\");\n                for(var pos = 0; pos < numInputs; ++pos){\n                    if (pos >= activeInput && pastedData.length > 0) {\n                        otp[pos] = pastedData.shift();\n                    }\n                }\n                _this2.handleOtpChange(otp);\n                _this2.focusInput(_this2.props.numInputs);\n            } else if (value && value.trim().length > 1) {\n                e.clipboardData = {\n                    getData: function getData() {\n                        return value.trim();\n                    }\n                };\n                _this2.handleOnPaste(e);\n            } else if (_this2.isInputValueValid(e.target.value)) {\n                _this2.focusNextInput();\n            } else {\n                if (!_this2.props.isInputNum) {\n                    var nativeEvent = e.nativeEvent;\n                    if (nativeEvent.data === null && nativeEvent.inputType === \"deleteContentBackward\") {\n                        e.preventDefault();\n                        _this2.changeCodeAtFocus(\"\");\n                        _this2.focusPrevInput();\n                    }\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this2), \"renderInputs\", function() {\n            var activeInput = _this2.state.activeInput;\n            var _this2$props3 = _this2.props, id = _this2$props3.id, autoComplete = _this2$props3.autoComplete, numInputs = _this2$props3.numInputs, inputStyle = _this2$props3.inputStyle, focusStyle = _this2$props3.focusStyle, separator = _this2$props3.separator, _this2$props3$separat = _this2$props3.separateAfter, separateAfter = _this2$props3$separat === void 0 ? 1 : _this2$props3$separat, isDisabled = _this2$props3.isDisabled, disabledStyle = _this2$props3.disabledStyle, hasErrored = _this2$props3.hasErrored, errorStyle = _this2$props3.errorStyle, isSuccessed = _this2$props3.isSuccessed, successStyle = _this2$props3.successStyle, shouldAutoFocus = _this2$props3.shouldAutoFocus, isInputNum = _this2$props3.isInputNum, isInputSecure = _this2$props3.isInputSecure, className = _this2$props3.className, inputProps = _this2$props3.inputProps, onSubmit = _this2$props3.onSubmit;\n            var inputs = [];\n            var otp = _this2.getOtpValue();\n            var placeholder = _this2.getPlaceholderValue();\n            var dataCy = _this2.props[\"data-cy\"];\n            var dataTestId = _this2.props[\"data-testid\"];\n            var customTestAttr = _this2.props[\"custom-test-attr\"];\n            var customTestId = _this2.props[\"custom-test-id\"];\n            var _loop = function _loop(i) {\n                var shouldRender = void 0;\n                if ((i + 1) % parseInt(separateAfter) === 0) {\n                    shouldRender = true;\n                } else {\n                    shouldRender = false;\n                }\n                var testAttr = {};\n                if (customTestAttr) {\n                    testAttr[customTestAttr] = customTestId && \"\".concat(customTestId, \"-\").concat(i);\n                }\n                var currentInputProps = {};\n                if (inputProps) {\n                    if (Array.isArray(inputProps)) {\n                        if (inputProps[i]) {\n                            currentInputProps = inputProps[i];\n                        }\n                    } else {\n                        currentInputProps = inputProps;\n                    }\n                }\n                inputs.push(_react[\"default\"].createElement(SingleOtpInput, _extends({\n                    id: id && \"\".concat(id, \"-\").concat(i),\n                    autoComplete: autoComplete !== null && autoComplete !== void 0 ? autoComplete : \"off\",\n                    placeholder: placeholder && placeholder[i],\n                    key: i,\n                    index: i,\n                    focus: activeInput === i,\n                    value: otp && otp[i],\n                    onChange: _this2.handleOnChange,\n                    onKeyDown: _this2.handleOnKeyDown,\n                    onInput: _this2.handleOnInput,\n                    onPaste: _this2.handleOnPaste,\n                    onFocus: function onFocus(e) {\n                        _this2.setState({\n                            activeInput: i\n                        });\n                        e.target.select();\n                    },\n                    onBlur: function onBlur() {\n                        return _this2.setState({\n                            activeInput: -1\n                        });\n                    },\n                    separator: separator,\n                    inputStyle: inputStyle,\n                    focusStyle: focusStyle,\n                    isLastChild: i === numInputs - 1,\n                    isDisabled: isDisabled,\n                    disabledStyle: disabledStyle,\n                    hasErrored: hasErrored,\n                    errorStyle: errorStyle,\n                    isSuccessed: isSuccessed,\n                    successStyle: successStyle,\n                    shouldAutoFocus: shouldAutoFocus,\n                    isInputNum: isInputNum,\n                    isInputSecure: isInputSecure,\n                    className: className,\n                    \"data-cy\": dataCy && \"\".concat(dataCy, \"-\").concat(i),\n                    \"data-testid\": dataTestId && \"\".concat(dataTestId, \"-\").concat(i),\n                    shouldRender: shouldRender,\n                    onSubmit: onSubmit\n                }, currentInputProps, testAttr)));\n            };\n            for(var i = 0; i < numInputs; i++){\n                _loop(i);\n            }\n            return inputs;\n        });\n        return _this2;\n    }\n    _createClass(OtpInput, [\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate() {\n                var value = this.props.value;\n                var activeInput = this.state.activeInput;\n                if (value == \"\" && activeInput > 0) {\n                    this.setState({\n                        activeInput: 0\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var containerStyle = this.props.containerStyle;\n                return _react[\"default\"].createElement(\"div\", {\n                    style: Object.assign({\n                        display: \"flex\"\n                    }, isStyleObject(containerStyle) && containerStyle),\n                    className: !isStyleObject(containerStyle) ? containerStyle : \"\"\n                }, this.renderInputs());\n            }\n        }\n    ]);\n    return OtpInput;\n}(_react.Component);\n_defineProperty(OtpInput, \"defaultProps\", {\n    numInputs: 4,\n    onChange: function onChange(otp) {\n        return console.log(otp);\n    },\n    isDisabled: false,\n    shouldAutoFocus: false,\n    value: \"\",\n    isInputSecure: false,\n    onSubmit: function onSubmit(otp) {\n        return console.log(otp);\n    }\n});\nvar _default = OtpInput;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react18-input-otp/lib/index.js\n");

/***/ })

};
;